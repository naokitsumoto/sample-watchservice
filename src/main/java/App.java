import java.nio.file.FileSystems;
import java.nio.file.Paths;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.nio.file.Watchable;
import java.nio.file.WatchEvent.Kind;

import static java.nio.file.StandardWatchEventKinds.*;


import java.io.IOException;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public static void main(String[] args) {
        new App().watch();
    }

    public void watch() {
        WatchService watcher;
        try {
            watcher = FileSystems.getDefault().newWatchService();
            Watchable path = Paths.get(".");
            path.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
        } catch(IOException e) {
            e.printStackTrace();
            return;
        }

        while(true) {
            System.out.println("watching.");
            WatchKey watchKey;
            try {
                watchKey = watcher.take();

            } catch (InterruptedException e) {
                System.err.println(e.getMessage());
                return;
            }

            for(WatchEvent<?> event : watchKey.pollEvents()) {
                Kind<?> kind = event.kind();
                Object context = event.context();
                System.out.println("kind = " + kind + ", context = " + context);
            }

            if(!watchKey.reset()) {
                System.out.println("Watch key becomes to be invalid.");
                return;
            }
        }
    }
}
